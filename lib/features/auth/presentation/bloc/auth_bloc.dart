import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../domain/repositories/auth_repository.dart';
import '../../../profile/domain/entities/user_entity.dart';
import '../../../../core/usecase/usecase.dart';

// Events
abstract class AuthEvent extends Equatable {
  const AuthEvent();

  @override
  List<Object?> get props => [];
}

class LoginRequested extends AuthEvent {
  const LoginRequested({required this.email, required this.password});

  final String email;
  final String password;

  @override
  List<Object?> get props => [email, password];
}

class LogoutRequested extends AuthEvent {
  const LogoutRequested();
}

class CheckAuthStatus extends AuthEvent {
  const CheckAuthStatus();
}

class TokenExpired extends AuthEvent {
  const TokenExpired();
}

// States
abstract class AuthState extends Equatable {
  const AuthState();

  @override
  List<Object?> get props => [];
}

class AuthInitial extends AuthState {}

class AuthLoading extends AuthState {}

class AuthSuccess extends AuthState {
  const AuthSuccess({required this.user});

  final UserEntity user;

  @override
  List<Object?> get props => [user];
}

class AuthFailure extends AuthState {
  const AuthFailure({required this.message});

  final String message;

  @override
  List<Object?> get props => [message];
}

// BLoC
class AuthBloc extends Bloc<AuthEvent, AuthState> {
  AuthBloc({required AuthRepository authRepository})
    : _authRepository = authRepository,
      super(AuthInitial()) {
    on<LoginRequested>(_onLoginRequested);
    on<LogoutRequested>(_onLogoutRequested);
    on<CheckAuthStatus>(_onCheckAuthStatus);
    on<TokenExpired>(_onTokenExpired);
  }

  final AuthRepository _authRepository;

  Future<void> _onLoginRequested(
    LoginRequested event,
    Emitter<AuthState> emit,
  ) async {
    print('üîê AuthBloc: –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è ${event.email}');
    emit(AuthLoading());

    try {
      final result = await _authRepository.login(event.email, event.password);
      print('üîê AuthBloc: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $result');

      if (result is Success<UserEntity>) {
        print('üîê AuthBloc: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è ${result.data.name}');
        emit(AuthSuccess(user: result.data));
      } else if (result is FailureResult<UserEntity>) {
        print('üîê AuthBloc: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${result.failure}');
        emit(AuthFailure(message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'));
      }
    } catch (e) {
      print('üîê AuthBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e');
      emit(AuthFailure(message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e'));
    }
  }

  Future<void> _onLogoutRequested(
    LogoutRequested event,
    Emitter<AuthState> emit,
  ) async {
    emit(AuthLoading());

    final result = await _authRepository.logout();

    if (result.isSuccess) {
      emit(AuthInitial());
    } else {
      emit(AuthFailure(message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞'));
    }
  }

  Future<void> _onCheckAuthStatus(
    CheckAuthStatus event,
    Emitter<AuthState> emit,
  ) async {
    print('üîê AuthBloc: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    emit(AuthLoading());

    try {
      final result = await _authRepository.isAuthenticated();
      print('üîê AuthBloc: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $result');

      if (result is Success<bool> && result.data == true) {
        print('üîê AuthBloc: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UserEntity
        final roleResult = await _authRepository.getUserRole();
        if (roleResult is Success<String>) {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é UserEntity –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          final userEntity = UserEntity(
            id: 1, // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            email: 'user@example.com',
            role: roleResult.data,
          );
          emit(AuthSuccess(user: userEntity));
        } else {
          emit(AuthInitial());
        }
      } else {
        print('üîê AuthBloc: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        emit(AuthInitial());
      }
    } catch (e) {
      print('üîê AuthBloc: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      emit(AuthInitial());
    }
  }

  Future<void> _onTokenExpired(
    TokenExpired event,
    Emitter<AuthState> emit,
  ) async {
    print('üîê AuthBloc: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞');
    emit(AuthFailure(message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ'));
  }
}
