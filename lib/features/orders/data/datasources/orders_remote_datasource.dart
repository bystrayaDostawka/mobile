import 'package:dio/dio.dart';
import '../../../../core/network/api_client.dart';
import '../models/orders_response_model.dart';
import '../models/order_details_response_model.dart';
import '../models/order_status_model.dart';
import '../models/photo_model.dart';
import '../models/order_file_model.dart';
import '../models/order_comment_model.dart';
import '../models/create_order_request.dart';

/// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–æ–∫
abstract class OrdersRemoteDataSource {
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
  Future<List<OrderModel>> getOrders({
    String? search,
    int? orderStatusId,
    List<int>? selectedStatusIds,
    String? deliveryAt,
    String? dateFrom,
    String? dateTo,
  });

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –ø–æ ID
  Future<OrderDetailsResponseModel> getOrderDetails(int orderId);

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  Future<OrderDetailsResponseModel> createOrder({
    required int bankId,
    required String product,
    required String name,
    required String surname,
    required String patronymic,
    required String phone,
    required String address,
    required DateTime deliveryDate,
    String? deliveryTimeRange,
    int? courierId,
    String? note,
  });

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
  Future<List<OrderStatusModel>> getOrderStatuses();

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  Future<OrderDetailsResponseModel> updateOrderStatus(
    int orderId,
    int orderStatusId,
    String? note,
    DateTime? deliveryDate,
    {String? deliveryTimeRange}
  );

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
  Future<List<PhotoModel>> getOrderPhotos(int orderId);


  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
  Future<List<PhotoModel>> uploadOrderPhotos(
    int orderId,
    List<String> photoPaths,
  );

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
  Future<Map<String, dynamic>> deleteOrderPhoto(int orderId, int photoId);

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<Map<String, dynamic>> createCourierNote(
    int orderId,
    String courierNote,
  );

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<Map<String, dynamic>> updateCourierNote(
    int orderId,
    String courierNote,
  );

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<Map<String, dynamic>> deleteCourierNote(int orderId);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–∫–∞–∑–∞
  Future<List<OrderCommentModel>> getOrderComments(int orderId);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫—É—Ä—å–µ—Ä–∞
  Future<List<OrderCommentModel>> getCourierComments();

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞
  Future<OrderCommentModel> createOrderComment(int orderId, String comment);

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  Future<OrderCommentModel> updateOrderComment(
    int orderId,
    int commentId,
    bool isCompleted,
  );

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  Future<void> deleteOrderComment(int orderId, int commentId);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
  Future<List<OrderFileModel>> getOrderFiles(int orderId);

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∑–∞–∫–∞–∑–∞
  Future<OrderFileModel> getOrderFile(int orderId, int fileId);

  /// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–∞
  Future<Response<List<int>>> downloadOrderFile(int orderId, int fileId);
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
class OrdersRemoteDataSourceImpl implements OrdersRemoteDataSource {
  OrdersRemoteDataSourceImpl({required this.apiClient});

  final ApiClient apiClient;

  @override
  Future<List<OrderModel>> getOrders({
    String? search,
    int? orderStatusId,
    List<int>? selectedStatusIds,
    String? deliveryAt,
    String? dateFrom,
    String? dateTo,
  }) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏');

    // –°—Ç—Ä–æ–∏–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    final queryParams = <String, dynamic>{};

    if (search != null && search.isNotEmpty) {
      queryParams['search'] = search;
    }
    if (orderStatusId != null) {
      queryParams['order_status_id'] = orderStatusId;
    }
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
    if (selectedStatusIds != null && selectedStatusIds.isNotEmpty) {
      queryParams['order_status_ids'] = selectedStatusIds.join(',');
      print('üåê OrdersRemoteDataSource: –î–æ–±–∞–≤–ª—è–µ–º order_status_ids: ${selectedStatusIds.join(',')}');
    }
    if (deliveryAt != null && deliveryAt.isNotEmpty) {
      queryParams['delivery_at'] = deliveryAt;
    }
    if (dateFrom != null && dateFrom.isNotEmpty) {
      queryParams['date_from'] = dateFrom;
    }
    if (dateTo != null && dateTo.isNotEmpty) {
      queryParams['date_to'] = dateTo;
    }

    print(
      'üåê OrdersRemoteDataSource: –ò—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: $queryParams',
    );
    final response = await apiClient.getOrders(queryParams);
    return response;
  }

  @override
  Future<OrderDetailsResponseModel> getOrderDetails(int orderId) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.getOrderById(orderId);
  }

  @override
  Future<OrderDetailsResponseModel> createOrder({
    required int bankId,
    required String product,
    required String name,
    required String surname,
    required String patronymic,
    required String phone,
    required String address,
    required DateTime deliveryDate,
    String? deliveryTimeRange,
    int? courierId,
    String? note,
  }) async {
    print('üåê OrdersRemoteDataSource: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑');
    
    final request = CreateOrderRequest(
      bankId: bankId,
      product: product,
      name: name,
      surname: surname,
      patronymic: patronymic,
      phone: phone,
      address: address,
      deliveryDate: deliveryDate,
      deliveryTimeRange: deliveryTimeRange,
      courierId: courierId,
      note: note,
    );
    
    final response = await apiClient.createOrder(request);
    return OrderDetailsResponseModel.fromJson(response);
  }

  @override
  Future<List<OrderStatusModel>> getOrderStatuses() async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤');
    return await apiClient.getOrderStatuses();
  }

  @override
  Future<OrderDetailsResponseModel> updateOrderStatus(
    int orderId,
    int orderStatusId,
    String? note,
    DateTime? deliveryDate,
    {String? deliveryTimeRange}
  ) async {
    print('üåê OrdersRemoteDataSource: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ $orderId');
    print('üåê OrdersRemoteDataSource: –°—Ç–∞—Ç—É—Å: $orderStatusId, –ü—Ä–∏—á–∏–Ω–∞: $note, –î–∞—Ç–∞: $deliveryDate');
    
    final request = UpdateOrderStatusRequest(
      orderStatusId: orderStatusId,
      note: note,
      deliveryDate: deliveryDate,
      deliveryTimeRange: deliveryTimeRange,
    );
    final response = await apiClient.updateOrderStatus(orderId, request);

    print('üåê OrdersRemoteDataSource: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ OrderDetailsResponseModel
    return OrderDetailsResponseModel.fromJson(response);
  }

  @override
  Future<List<PhotoModel>> getOrderPhotos(int orderId) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.getOrderPhotos(orderId);
  }


  @override
  Future<List<PhotoModel>> uploadOrderPhotos(
    int orderId,
    List<String> photoPaths,
  ) async {
    print(
      'üåê OrdersRemoteDataSource: –ó–∞–≥—Ä—É–∂–∞–µ–º ${photoPaths.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId',
    );
    return await apiClient.uploadOrderPhotos(orderId, photoPaths);
  }

  @override
  Future<Map<String, dynamic>> deleteOrderPhoto(
    int orderId,
    int photoId,
  ) async {
    print(
      'üåê OrdersRemoteDataSource: –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é $photoId –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId',
    );
    return await apiClient.deleteOrderPhoto(orderId, photoId);
  }

  @override
  Future<Map<String, dynamic>> createCourierNote(
    int orderId,
    String courierNote,
  ) async {
    print(
      'üåê OrdersRemoteDataSource: –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId',
    );
    return await apiClient.createCourierNote(orderId, courierNote);
  }

  @override
  Future<Map<String, dynamic>> updateCourierNote(
    int orderId,
    String courierNote,
  ) async {
    print(
      'üåê OrdersRemoteDataSource: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId',
    );
    return await apiClient.updateCourierNote(orderId, courierNote);
  }

  @override
  Future<Map<String, dynamic>> deleteCourierNote(int orderId) async {
    print(
      'üåê OrdersRemoteDataSource: –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId',
    );
    return await apiClient.deleteCourierNote(orderId);
  }

  @override
  Future<List<OrderCommentModel>> getOrderComments(int orderId) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.getOrderComments(orderId);
  }

  @override
  Future<List<OrderCommentModel>> getCourierComments() async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞');
    return await apiClient.getCourierComments();
  }

  @override
  Future<OrderCommentModel> createOrderComment(int orderId, String comment) async {
    print('üåê OrdersRemoteDataSource: –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.createOrderComment(orderId, comment);
  }

  @override
  Future<OrderCommentModel> updateOrderComment(
    int orderId,
    int commentId,
    bool isCompleted,
  ) async {
    print('üåê OrdersRemoteDataSource: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è $commentId');
    return await apiClient.updateOrderComment(orderId, commentId, isCompleted);
  }

  @override
  Future<void> deleteOrderComment(int orderId, int commentId) async {
    print('üåê OrdersRemoteDataSource: –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π $commentId');
    return await apiClient.deleteOrderComment(orderId, commentId);
  }

  @override
  Future<List<OrderFileModel>> getOrderFiles(int orderId) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.getOrderFiles(orderId);
  }

  @override
  Future<OrderFileModel> getOrderFile(int orderId, int fileId) async {
    print('üåê OrdersRemoteDataSource: –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª $fileId –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.getOrderFile(orderId, fileId);
  }

  @override
  Future<Response<List<int>>> downloadOrderFile(int orderId, int fileId) async {
    print('üåê OrdersRemoteDataSource: –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª $fileId –¥–ª—è –∑–∞–∫–∞–∑–∞ $orderId');
    return await apiClient.downloadOrderFile(orderId, fileId);
  }
}
