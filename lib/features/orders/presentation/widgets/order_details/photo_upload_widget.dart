import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';

import '../../../../../core/theme/app_colors.dart';
import '../../../../../core/theme/app_fonts.dart';
import '../../../../../core/services/local_photo_service.dart';
import '../../../../../core/validators/image_validator.dart';
import '../../../../../shared/widgets/confirmation_dialog.dart';
import '../../../../../shared/widgets/fullscreen_instruction_dialog.dart';
import '../../../../../shared/widgets/image_picker_button.dart';
import '../../../../../shared/widgets/photo_grid_widget.dart';
import '../../../../../shared/widgets/local_photo_grid_widget.dart';
import '../../../domain/entities/order_entity.dart';
import '../../../domain/entities/local_photo_entity.dart';
import '../../bloc/order_details_bloc.dart';

/// –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
class PhotoUploadWidgetRefactored extends StatefulWidget {
  const PhotoUploadWidgetRefactored({
    super.key,
    required this.orderDetails,
    required this.orderDetailsBloc,
  });

  final OrderDetailsEntity orderDetails;
  final OrderDetailsBloc orderDetailsBloc;

  @override
  State<PhotoUploadWidgetRefactored> createState() =>
      _PhotoUploadWidgetRefactoredState();
}

class _PhotoUploadWidgetRefactoredState
    extends State<PhotoUploadWidgetRefactored> {
  final LocalPhotoService _localPhotoService = LocalPhotoService();
  final List<LocalPhotoEntity> _localPhotos = [];
  bool _isUploading = false;
  int _lastUploadedPhotoCount = 0;

  @override
  void initState() {
    super.initState();
    _lastUploadedPhotoCount = widget.orderDetails.photos.length;
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<OrderDetailsBloc, OrderDetailsState>(
      listener: (context, state) {
        if (state is OrderDetailsLoaded) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
          final newPhotoCount = state.orderDetails.photos.length;

          print(
            'üì∏ BlocListener: —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ = $newPhotoCount, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ = $_lastUploadedPhotoCount',
          );

          if (newPhotoCount > _lastUploadedPhotoCount) {
            print(
              'üì∏ BlocListener: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è! –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞',
            );

            // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if (_localPhotos.isNotEmpty) {
              final uploadedPhoto = _localPhotos.first;
              print('üì∏ BlocListener: —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ ${uploadedPhoto.path}');
              _localPhotos.removeAt(0);

              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
              _lastUploadedPhotoCount = newPhotoCount;

              // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
              _localPhotoService.deletePhoto(uploadedPhoto).catchError((e) {
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
              });

              // –û–±–Ω–æ–≤–ª—è–µ–º UI
              if (mounted) {
                setState(() {});
              }
            } else {
              print('üì∏ BlocListener: –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å');
            }
          }
        } else if (state is OrderDetailsError) {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
          print(
            'üì∏ BlocListener: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${state.message}',
          );

          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
          if (mounted) {
            setState(() {
              _isUploading = false;
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
              for (int i = 0; i < _localPhotos.length; i++) {
                _localPhotos[i] = _localPhotos[i].copyWith(
                  isUploading: false,
                  uploadError: state.message,
                );
              }
            });
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${state.message}'),
              backgroundColor: AppColors.error,
            ),
          );
        }
      },
      child: Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildHeader(context),
              const SizedBox(height: 12),
              _buildUploadButton(),
              const SizedBox(height: 16),
              _buildWarningIfNeeded(),
              _buildLocalPhotoGrid(),
              const SizedBox(height: 16),
              _buildUploadedPhotoGrid(context),
              const SizedBox(height: 16),
              _buildBatchUploadButton(),
              const SizedBox(height: 16),
              _buildSecurityWarning(),
            ],
          ),
        ),
      ),
    );
  }

  /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  Widget _buildHeader(BuildContext context) {
    final totalPhotos = widget.orderDetails.photos.length + _localPhotos.length;
    final isMaxPhotosReached = totalPhotos >= ImageValidator.maxPhotos;

    return Row(
      children: [
        Text(
          '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞',
          style: AppTextStyles.h6.copyWith(
            color: AppColors.textPrimary,
            fontWeight: FontWeight.w600,
          ),
        ),
        const Spacer(),
        Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '$totalPhotos/${ImageValidator.maxPhotos}',
              style: AppTextStyles.bodyMedium.copyWith(
                color: AppColors.textSecondary,
                fontWeight: isMaxPhotosReached
                    ? FontWeight.w600
                    : FontWeight.normal,
              ),
            ),
            const SizedBox(width: 8),
            GestureDetector(
              onTap: () => _showInstructionDialog(context),
              child: Container(
                padding: const EdgeInsets.all(4),
                decoration: BoxDecoration(
                  color: AppColors.primary.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  Icons.info_outline,
                  size: 16,
                  color: AppColors.primary,
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  Widget _buildUploadButton() {
    final totalPhotos = widget.orderDetails.photos.length + _localPhotos.length;
    final isMaxPhotosReached = totalPhotos >= ImageValidator.maxPhotos;

    return ImagePickerButton(
      onImagePicked: (source) => _pickImage(context, source),
      isLoading: _isUploading,
      isEnabled: !isMaxPhotosReached,
      disabledLabel:
          '–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${ImageValidator.maxPhotos}/${ImageValidator.maxPhotos})',
    );
  }

  /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
  Widget _buildWarningIfNeeded() {
    final totalPhotos = widget.orderDetails.photos.length + _localPhotos.length;
    final shouldShowWarning =
        totalPhotos >= ImageValidator.maxPhotos * 0.75 &&
        totalPhotos < ImageValidator.maxPhotos;

    if (!shouldShowWarning) return const SizedBox.shrink();

    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: AppColors.warning.withValues(alpha: 0.1),
            border: Border.all(color: AppColors.warning.withValues(alpha: 0.3)),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Row(
            children: [
              Icon(
                Icons.warning_amber_outlined,
                color: AppColors.warning,
                size: 20,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  '–û—Å—Ç–∞–ª–æ—Å—å ${ImageValidator.maxPhotos - totalPhotos} —Ñ–æ—Ç–æ –∏–∑ ${ImageValidator.maxPhotos}',
                  style: AppTextStyles.bodyMedium.copyWith(
                    color: AppColors.warning,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: 12),
      ],
    );
  }

  /// –°–µ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  Widget _buildLocalPhotoGrid() {
    if (_localPhotos.isEmpty) return const SizedBox.shrink();

    return LocalPhotoGridWidget(
      photos: _localPhotos,
      onDeletePhoto: _deleteLocalPhoto,
      maxPhotos: ImageValidator.maxPhotos,
    );
  }

  /// –°–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  Widget _buildUploadedPhotoGrid(BuildContext context) {
    if (widget.orderDetails.photos.isEmpty) return const SizedBox.shrink();

    return PhotoGridWidget(
      photos: widget.orderDetails.photos,
      onDeletePhoto: (photo) => _showDeleteConfirmation(context, photo),
    );
  }

  /// –ö–Ω–æ–ø–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  Widget _buildBatchUploadButton() {
    if (_localPhotos.isEmpty) return const SizedBox.shrink();

    return SizedBox(
      width: double.infinity,
      child: ElevatedButton.icon(
        onPressed: _isUploading ? null : _uploadAllPhotos,
        icon: _isUploading
            ? const SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(strokeWidth: 2),
              )
            : const Icon(Icons.cloud_upload),
        label: Text(
          _isUploading
              ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...'
              : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ (${_localPhotos.length})',
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 12),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
      ),
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  Future<void> _showDeleteConfirmation(
    BuildContext context,
    PhotoEntity photo,
  ) async {
    final confirmed = await ConfirmationDialog.show(
      context: context,
      title: '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
      message: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?',
      confirmText: '–£–¥–∞–ª–∏—Ç—å',
      isDestructive: true,
    );

    if (confirmed == true) {
      _deletePhoto(photo);
    }
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
  void _deletePhoto(PhotoEntity photo) {
    widget.orderDetailsBloc.add(
      DeleteOrderPhoto(orderId: widget.orderDetails.id, photoId: photo.id),
    );
  }

  /// –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
  void _deleteLocalPhoto(LocalPhotoEntity photo) async {
    try {
      await _localPhotoService.deletePhoto(photo);
      if (mounted) {
        setState(() {
          _localPhotos.remove(photo);
        });
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: $e');
    }
  }

  /// –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  Future<void> _pickImage(BuildContext context, ImageSource source) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      final totalPhotos =
          widget.orderDetails.photos.length + _localPhotos.length;
      final countValidation = ImageValidator.validatePhotoCount(totalPhotos);
      if (!countValidation.isValid) {
        _showError(countValidation.errorMessage!);
        return;
      }

      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      LocalPhotoEntity? localPhoto;
      if (source == ImageSource.camera) {
        localPhoto = await _localPhotoService.takePhoto();
      } else {
        localPhoto = await _localPhotoService.pickFromGallery();
      }

      if (localPhoto != null && mounted) {
        setState(() {
          _localPhotos.add(localPhoto!);
        });
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
  void _showError(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(message), backgroundColor: AppColors.error),
      );
    }
  }

  /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  Widget _buildSecurityWarning() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: AppColors.primary.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: AppColors.primary.withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Icon(Icons.security, size: 16, color: AppColors.primary),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              '–î–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
              style: AppTextStyles.bodySmall.copyWith(
                color: AppColors.primary,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
  void _showInstructionDialog(BuildContext context) {
    FullscreenInstructionDialog.show(
      context: context,
      title: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
      imageAsset: 'assets/images/instructions.png',
    );
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  Future<void> _uploadAllPhotos() async {
    if (_localPhotos.isEmpty) return;

    print('üì∏ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É ${_localPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');

    if (!mounted) return;
    setState(() {
      _isUploading = true;
    });

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      if (mounted) {
        setState(() {
          for (int i = 0; i < _localPhotos.length; i++) {
            _localPhotos[i] = _localPhotos[i].copyWith(isUploading: true);
          }
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      final photoPaths = _localPhotos.map((photo) => photo.path).toList();

      print('üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${photoPaths.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ BLoC
      widget.orderDetailsBloc.add(
        UploadOrderPhotos(
          orderId: widget.orderDetails.id,
          photoPaths: photoPaths,
        ),
      );

      print('üì∏ –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $e');
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (mounted) {
        setState(() {
          _isUploading = false;
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
          for (int i = 0; i < _localPhotos.length; i++) {
            _localPhotos[i] = _localPhotos[i].copyWith(
              isUploading: false,
              uploadError: e.toString(),
            );
          }
        });
      }
    }
  }

  @override
  void dispose() {
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–∂–µ—Ç–∞
    _localPhotoService.clearTempFiles();
    super.dispose();
  }
}
