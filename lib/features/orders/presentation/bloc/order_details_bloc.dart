import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';

import '../../../../core/usecase/usecase.dart';
import '../../../../core/error/failures.dart';
import '../../domain/entities/order_entity.dart';
import '../../domain/entities/order_status_entity.dart';
import '../../domain/usecases/get_order_details_usecase.dart';
import '../../domain/usecases/update_order_status_usecase.dart';
import '../../domain/usecases/get_order_statuses_usecase.dart';
import '../../domain/usecases/get_order_photos_usecase.dart';
import '../../domain/usecases/upload_order_photo_usecase.dart';
import '../../domain/usecases/upload_order_photos_usecase.dart';
import '../../domain/usecases/delete_order_photo_usecase.dart';
import '../../domain/usecases/create_courier_note_usecase.dart';
import '../../domain/usecases/update_courier_note_usecase.dart';
import '../../domain/usecases/delete_courier_note_usecase.dart';

/// –°–æ–±—ã—Ç–∏—è –¥–ª—è OrderDetailsBloc
abstract class OrderDetailsEvent extends Equatable {
  const OrderDetailsEvent();

  @override
  List<Object?> get props => [];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
class LoadOrderDetails extends OrderDetailsEvent {
  final int orderId;

  const LoadOrderDetails({required this.orderId});

  @override
  List<Object?> get props => [orderId];
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
class RefreshOrderDetails extends OrderDetailsEvent {
  const RefreshOrderDetails();
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
class UpdateOrderStatus extends OrderDetailsEvent {
  final int orderId;
  final int orderStatusId;
  final String? note;
  final DateTime? deliveryDate;

  const UpdateOrderStatus({
    required this.orderId,
    required this.orderStatusId,
    this.note,
    this.deliveryDate,
  });

  @override
  List<Object?> get props => [orderId, orderStatusId, note, deliveryDate];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
class LoadOrderStatuses extends OrderDetailsEvent {
  const LoadOrderStatuses();
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
class LoadOrderPhotos extends OrderDetailsEvent {
  final int orderId;

  const LoadOrderPhotos({required this.orderId});

  @override
  List<Object?> get props => [orderId];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
class UploadOrderPhoto extends OrderDetailsEvent {
  final int orderId;
  final String photoPath;

  const UploadOrderPhoto({required this.orderId, required this.photoPath});

  @override
  List<Object?> get props => [orderId, photoPath];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
class UploadOrderPhotos extends OrderDetailsEvent {
  final int orderId;
  final List<String> photoPaths;

  const UploadOrderPhotos({required this.orderId, required this.photoPaths});

  @override
  List<Object?> get props => [orderId, photoPaths];
}

/// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
class DeleteOrderPhoto extends OrderDetailsEvent {
  final int orderId;
  final int photoId;

  const DeleteOrderPhoto({required this.orderId, required this.photoId});

  @override
  List<Object?> get props => [orderId, photoId];
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
class CreateCourierNote extends OrderDetailsEvent {
  final int orderId;
  final String courierNote;

  const CreateCourierNote({required this.orderId, required this.courierNote});

  @override
  List<Object?> get props => [orderId, courierNote];
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
class UpdateCourierNote extends OrderDetailsEvent {
  final int orderId;
  final String courierNote;

  const UpdateCourierNote({required this.orderId, required this.courierNote});

  @override
  List<Object?> get props => [orderId, courierNote];
}

/// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
class DeleteCourierNote extends OrderDetailsEvent {
  final int orderId;

  const DeleteCourierNote({required this.orderId});

  @override
  List<Object?> get props => [orderId];
}

/// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è OrderDetailsBloc
abstract class OrderDetailsState extends Equatable {
  const OrderDetailsState();

  @override
  List<Object?> get props => [];
}

/// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class OrderDetailsInitial extends OrderDetailsState {
  const OrderDetailsInitial();
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
class OrderDetailsLoading extends OrderDetailsState {
  const OrderDetailsLoading();
}

/// –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
class OrderDetailsLoaded extends OrderDetailsState {
  final OrderDetailsEntity orderDetails;
  final List<OrderStatusEntity> statuses;

  const OrderDetailsLoaded({
    required this.orderDetails,
    this.statuses = const [],
  });

  @override
  List<Object?> get props => [orderDetails, statuses];
}

/// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
class OrderDetailsUpdating extends OrderDetailsState {
  final OrderDetailsEntity orderDetails;
  final List<OrderStatusEntity> statuses;

  const OrderDetailsUpdating({
    required this.orderDetails,
    required this.statuses,
  });

  @override
  List<Object?> get props => [orderDetails, statuses];
}

/// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
class OrderDetailsError extends OrderDetailsState {
  final String message;

  const OrderDetailsError({required this.message});

  @override
  List<Object?> get props => [message];
}

/// –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
class CourierNoteSaved extends OrderDetailsState {
  final OrderDetailsEntity orderDetails;
  final List<OrderStatusEntity> statuses;
  final String message;

  const CourierNoteSaved({
    required this.orderDetails,
    required this.statuses,
    required this.message,
  });

  @override
  List<Object?> get props => [orderDetails, statuses, message];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
class OrderPhotosLoading extends OrderDetailsState {
  final OrderDetailsEntity orderDetails;
  final List<OrderStatusEntity> statuses;

  const OrderPhotosLoading({
    required this.orderDetails,
    required this.statuses,
  });

  @override
  List<Object?> get props => [orderDetails, statuses];
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
class OrderPhotoUploading extends OrderDetailsState {
  final OrderDetailsEntity orderDetails;
  final List<OrderStatusEntity> statuses;

  const OrderPhotoUploading({
    required this.orderDetails,
    required this.statuses,
  });

  @override
  List<Object?> get props => [orderDetails, statuses];
}

/// BLoC –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
class OrderDetailsBloc extends Bloc<OrderDetailsEvent, OrderDetailsState> {
  OrderDetailsBloc({
    required this.getOrderDetailsUseCase,
    required this.updateOrderStatusUseCase,
    required this.getOrderStatusesUseCase,
    required this.getOrderPhotosUseCase,
    required this.uploadOrderPhotoUseCase,
    required this.uploadOrderPhotosUseCase,
    required this.deleteOrderPhotoUseCase,
    required this.createCourierNoteUseCase,
    required this.updateCourierNoteUseCase,
    required this.deleteCourierNoteUseCase,
  }) : super(const OrderDetailsInitial()) {
    on<LoadOrderDetails>(_onLoadOrderDetails);
    on<RefreshOrderDetails>(_onRefreshOrderDetails);
    on<UpdateOrderStatus>(_onUpdateOrderStatus);
    on<LoadOrderStatuses>(_onLoadOrderStatuses);
    on<LoadOrderPhotos>(_onLoadOrderPhotos);
    on<UploadOrderPhoto>(_onUploadOrderPhoto);
    on<UploadOrderPhotos>(_onUploadOrderPhotos);
    on<DeleteOrderPhoto>(_onDeleteOrderPhoto);
    on<CreateCourierNote>(_onCreateCourierNote);
    on<UpdateCourierNote>(_onUpdateCourierNote);
    on<DeleteCourierNote>(_onDeleteCourierNote);
  }

  final GetOrderDetailsUseCase getOrderDetailsUseCase;
  final UpdateOrderStatusUseCase updateOrderStatusUseCase;
  final GetOrderStatusesUseCase getOrderStatusesUseCase;
  final GetOrderPhotosUseCase getOrderPhotosUseCase;
  final UploadOrderPhotoUseCase uploadOrderPhotoUseCase;
  final UploadOrderPhotosUseCase uploadOrderPhotosUseCase;
  final DeleteOrderPhotoUseCase deleteOrderPhotoUseCase;
  final CreateCourierNoteUseCase createCourierNoteUseCase;
  final UpdateCourierNoteUseCase updateCourierNoteUseCase;
  final DeleteCourierNoteUseCase deleteCourierNoteUseCase;

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
  Future<void> _onLoadOrderDetails(
    LoadOrderDetails event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );
    emit(const OrderDetailsLoading());

    try {
      final result = await getOrderDetailsUseCase.call(
        GetOrderDetailsParams(orderId: event.orderId),
      );

      if (result is Success<OrderDetailsEntity>) {
        print('üîê OrderDetailsBloc: –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ${result.data.id}');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
        final statusesResult = await getOrderStatusesUseCase.call();
        List<OrderStatusEntity> statuses = [];

        if (statusesResult is Success<List<OrderStatusEntity>>) {
          statuses = statusesResult.data;
        }

        emit(OrderDetailsLoaded(orderDetails: result.data, statuses: statuses));

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π
        add(LoadOrderPhotos(orderId: event.orderId));
      } else if (result is FailureResult<OrderDetailsEntity>) {
        print(
          'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: ${result.failure}',
        );
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞'),
        );
      }
    } catch (e) {
      print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: $e');
      emit(const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞'));
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
  Future<void> _onRefreshOrderDetails(
    RefreshOrderDetails event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print('üîê OrderDetailsBloc: –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞');

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;
      add(LoadOrderDetails(orderId: currentState.orderDetails.id));
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  Future<void> _onUpdateOrderStatus(
    UpdateOrderStatus event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print('üîê OrderDetailsBloc: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${event.orderId}');

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      emit(
        OrderDetailsUpdating(
          orderDetails: currentState.orderDetails,
          statuses: currentState.statuses,
        ),
      );

      try {
        final result = await updateOrderStatusUseCase.call(
          UpdateOrderStatusParams(
            orderId: event.orderId,
            orderStatusId: event.orderStatusId,
            note: event.note,
            deliveryDate: event.deliveryDate,
          ),
        );

        if (result is Success<OrderDetailsEntity>) {
          print('üîê OrderDetailsBloc: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
          emit(
            OrderDetailsLoaded(
              orderDetails: result.data,
              statuses: currentState.statuses,
            ),
          );

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
          add(LoadOrderPhotos(orderId: event.orderId));
        } else if (result is FailureResult<OrderDetailsEntity>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${result.failure}',
          );
          emit(OrderDetailsError(message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'));
        }
      } catch (e) {
        print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'),
        );
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
  Future<void> _onLoadOrderStatuses(
    LoadOrderStatuses event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print('üîê OrderDetailsBloc: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤');

    try {
      final result = await getOrderStatusesUseCase.call();

      if (result is Success<List<OrderStatusEntity>>) {
        print('üîê OrderDetailsBloc: –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤');

        if (state is OrderDetailsLoaded) {
          final currentState = state as OrderDetailsLoaded;
          emit(
            OrderDetailsLoaded(
              orderDetails: currentState.orderDetails,
              statuses: result.data,
            ),
          );
        }
      } else if (result is FailureResult<List<OrderStatusEntity>>) {
        print(
          'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: ${result.failure}',
        );
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤'),
        );
      }
    } catch (e) {
      print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤: $e');
      emit(
        const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤'),
      );
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
  Future<void> _onLoadOrderPhotos(
    LoadOrderPhotos event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print('üîê OrderDetailsBloc: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞ ${event.orderId}');

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OrderDetailsLoaded, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      emit(
        OrderPhotosLoading(
          orderDetails: currentState.orderDetails,
          statuses: currentState.statuses,
        ),
      );

      try {
        final result = await getOrderPhotosUseCase.call(
          GetOrderPhotosParams(orderId: event.orderId),
        );

        if (result is Success<List<PhotoEntity>>) {
          print('üîê OrderDetailsBloc: –ü–æ–ª—É—á–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞');

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: currentState.orderDetails.courierComment,
            photos: result.data,
          );

          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<List<PhotoEntity>>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${result.failure}',
          );
          emit(OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'));
        }
      } catch (e) {
        print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $e');
        emit(const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'));
      }
    } else {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ OrderDetailsLoaded, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      print(
        'üîê OrderDetailsBloc: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ OrderDetailsLoaded: ${state.runtimeType}',
      );
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
  Future<void> _onUploadOrderPhoto(
    UploadOrderPhoto event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      emit(
        OrderPhotoUploading(
          orderDetails: currentState.orderDetails,
          statuses: currentState.statuses,
        ),
      );

      try {
        final result = await uploadOrderPhotoUseCase.call(
          UploadOrderPhotoParams(
            orderId: event.orderId,
            photoPath: event.photoPath,
          ),
        );

        if (result is Success<PhotoEntity>) {
          print('üîê OrderDetailsBloc: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
          final updatedPhotos = List<PhotoEntity>.from(
            currentState.orderDetails.photos,
          )..add(result.data);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: currentState.orderDetails.courierComment,
            photos: updatedPhotos,
          );

          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<PhotoEntity>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${result.failure}',
          );
          final errorMessage = _getUserFriendlyErrorMessage(result.failure);
          emit(OrderDetailsError(message: errorMessage));
        }
      } catch (e) {
        print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: $e');
        emit(const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'));
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞
  Future<void> _onUploadOrderPhotos(
    UploadOrderPhotos event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –ó–∞–≥—Ä—É–∂–∞–µ–º ${event.photoPaths.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      emit(
        OrderPhotoUploading(
          orderDetails: currentState.orderDetails,
          statuses: currentState.statuses,
        ),
      );

      try {
        final result = await uploadOrderPhotosUseCase.call(
          UploadOrderPhotosParams(
            orderId: event.orderId,
            photoPaths: event.photoPaths,
          ),
        );

        if (result is Success<List<PhotoEntity>>) {
          print(
            'üîê OrderDetailsBloc: ${result.data.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
          );

          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
          final updatedPhotos = List<PhotoEntity>.from(
            currentState.orderDetails.photos,
          )..addAll(result.data);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: currentState.orderDetails.courierComment,
            photos: updatedPhotos,
          );

          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<List<PhotoEntity>>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${result.failure}',
          );
          final errorMessage = _getUserFriendlyErrorMessage(result.failure);
          emit(OrderDetailsError(message: errorMessage));
        }
      } catch (e) {
        print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $e');
        emit(const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'));
      }
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–∞
  Future<void> _onDeleteOrderPhoto(
    DeleteOrderPhoto event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ${event.photoId} –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      try {
        final result = await deleteOrderPhotoUseCase.call(
          DeleteOrderPhotoParams(
            orderId: event.orderId,
            photoId: event.photoId,
          ),
        );

        if (result is Success<void>) {
          print('üîê OrderDetailsBloc: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

          // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
          final updatedPhotos = currentState.orderDetails.photos
              .where((photo) => photo.id != event.photoId)
              .toList();

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: currentState.orderDetails.courierComment,
            photos: updatedPhotos,
          );

          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<void>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${result.failure}',
          );
          emit(OrderDetailsError(message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'));
        }
      } catch (e) {
        print('üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: $e');
        emit(const OrderDetailsError(message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'));
      }
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<void> _onCreateCourierNote(
    CreateCourierNote event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      try {
        final result = await createCourierNoteUseCase.call(
          CreateCourierNoteParams(
            orderId: event.orderId,
            courierNote: event.courierNote,
          ),
        );

        if (result is Success<Map<String, dynamic>>) {
          print('üîê OrderDetailsBloc: –ó–∞–º–µ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–æ–π –∫—É—Ä—å–µ—Ä–∞
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: event.courierNote,
            photos: currentState.orderDetails.photos,
          );

          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
          emit(
            CourierNoteSaved(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
              message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
            ),
          );

          // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<Map<String, dynamic>>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: ${result.failure}',
          );
          final errorMessage = _getUserFriendlyErrorMessage(result.failure);
          emit(OrderDetailsError(message: errorMessage));
        }
      } catch (e) {
        print(
          'üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: $e',
        );
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞'),
        );
      }
    }
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<void> _onUpdateCourierNote(
    UpdateCourierNote event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      try {
        final result = await updateCourierNoteUseCase.call(
          UpdateCourierNoteParams(
            orderId: event.orderId,
            courierNote: event.courierNote,
          ),
        );

        if (result is Success<Map<String, dynamic>>) {
          print('üîê OrderDetailsBloc: –ó–∞–º–µ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–æ–π –∫—É—Ä—å–µ—Ä–∞
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: event.courierNote,
            photos: currentState.orderDetails.photos,
          );

          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          emit(
            CourierNoteSaved(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
              message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            ),
          );

          // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<Map<String, dynamic>>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: ${result.failure}',
          );
          final errorMessage = _getUserFriendlyErrorMessage(result.failure);
          emit(OrderDetailsError(message: errorMessage));
        }
      } catch (e) {
        print(
          'üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: $e',
        );
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞'),
        );
      }
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞
  Future<void> _onDeleteCourierNote(
    DeleteCourierNote event,
    Emitter<OrderDetailsState> emit,
  ) async {
    print(
      'üîê OrderDetailsBloc: –£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${event.orderId}',
    );

    if (state is OrderDetailsLoaded) {
      final currentState = state as OrderDetailsLoaded;

      try {
        final result = await deleteCourierNoteUseCase.call(
          DeleteCourierNoteParams(orderId: event.orderId),
        );

        if (result is Success<Map<String, dynamic>>) {
          print('üîê OrderDetailsBloc: –ó–∞–º–µ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑, —É–±–∏—Ä–∞—è –∑–∞–º–µ—Ç–∫—É –∫—É—Ä—å–µ—Ä–∞
          final updatedOrderDetails = OrderDetailsEntity(
            id: currentState.orderDetails.id,
            bankId: currentState.orderDetails.bankId,
            product: currentState.orderDetails.product,
            name: currentState.orderDetails.name,
            surname: currentState.orderDetails.surname,
            patronymic: currentState.orderDetails.patronymic,
            phone: currentState.orderDetails.phone,
            address: currentState.orderDetails.address,
            orderStatusId: currentState.orderDetails.orderStatusId,
            note: currentState.orderDetails.note,
            declinedReason: currentState.orderDetails.declinedReason,
            deliveryAt: currentState.orderDetails.deliveryAt,
            deliveredAt: currentState.orderDetails.deliveredAt,
            courierId: currentState.orderDetails.courierId,
            createdAt: currentState.orderDetails.createdAt,
            updatedAt: currentState.orderDetails.updatedAt,
            bankName: currentState.orderDetails.bankName,
            courierComment: null,
            photos: currentState.orderDetails.photos,
          );

          // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
          emit(
            CourierNoteSaved(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
              message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
            ),
          );

          // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
          emit(
            OrderDetailsLoaded(
              orderDetails: updatedOrderDetails,
              statuses: currentState.statuses,
            ),
          );
        } else if (result is FailureResult<Map<String, dynamic>>) {
          print(
            'üîê OrderDetailsBloc: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: ${result.failure}',
          );
          final errorMessage = _getUserFriendlyErrorMessage(result.failure);
          emit(OrderDetailsError(message: errorMessage));
        }
      } catch (e) {
        print(
          'üîê OrderDetailsBloc: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞: $e',
        );
        emit(
          const OrderDetailsError(message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫—É—Ä—å–µ—Ä–∞'),
        );
      }
    }
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _getUserFriendlyErrorMessage(Failure failure) {
    if (failure is ServerFailure) {
      final message = failure.message.toLowerCase();

      // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (message.contains('unauthorized') ||
          message.contains('–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')) {
        return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ';
      }

      // –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
      if (message.contains('forbidden') ||
          message.contains('–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')) {
        return '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è';
      }

      // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (message.contains('validation') ||
          message.contains('–≤–∞–ª–∏–¥–∞—Ü–∏—è') ||
          message.contains('422') ||
          message.contains('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')) {
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
      }

      // –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
      if (message.contains('409') ||
          message.contains('–∫–æ–Ω—Ñ–ª–∏–∫—Ç') ||
          message.contains('conflict') ||
          message.contains('–ö–æ–Ω—Ñ–ª–∏–∫—Ç')) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (message.contains('–ó–∞–º–µ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
          return '–ó–∞–º–µ—Ç–∫–∞ –∫—É—Ä—å–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        }
        return '–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç';
      }

      // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
      if (message.contains('500') || message.contains('–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞')) {
        return '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      }

      // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
      if (message.contains('timeout') || message.contains('—Ç–∞–π–º–∞—É—Ç')) {
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
      }

      // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
    }

    if (failure is NetworkFailure) {
      return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
    }

    if (failure is AuthFailure) {
      return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ';
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
  }
}
